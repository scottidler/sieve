name: Deploy Home Gmail Sieve

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'configs/home-config.yml'
      - '.github/workflows/deploy-home.yml'
      - 'package.json'
      - 'tsconfig.json'
      - 'appsscript.json'
  workflow_dispatch:

jobs:
  deploy-home:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      - name: Embed configuration
        run: |
          echo "Embedding configuration..."
          # Install js-yaml to convert YAML to JSON
          npm install js-yaml
          # Convert YAML config to JavaScript constant
          node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            const config = yaml.load(fs.readFileSync('configs/home-config.yml', 'utf8'));
            const jsContent = 'const SIEVE_CONFIG = ' + JSON.stringify(config, null, 2) + ';';
            fs.writeFileSync('dist/config-embed.js', jsContent);
            console.log('Configuration embedded successfully');
          "

      - name: Install clasp globally
        run: npm install -g @google/clasp

      - name: Setup clasp authentication (CORRECT LOCATION)
        env:
          CLASP_TOKEN: ${{ secrets.SIEVE_CLASP_TOKEN_HOME }}
        run: |
          echo "Setting up clasp authentication in ~/.clasprc.json..."
          echo "$CLASP_TOKEN" > ~/.clasprc.json
          
      - name: Debug clasp authentication setup  
        run: |
          echo "=== Debugging clasp authentication ==="
          echo "Check if ~/.clasprc.json exists:"
          ls -la ~/.clasprc.json || echo "File does not exist"
          echo ""
          echo "File size:"
          wc -c ~/.clasprc.json || echo "Cannot get file size"
          echo ""
          echo "FULL FILE CONTENTS:"
          echo "--- START OF ~/.clasprc.json ---"
          cat ~/.clasprc.json || echo "Cannot read file"
          echo ""
          echo "--- END OF ~/.clasprc.json ---"
          echo ""
          echo "JSON validation:"
          jq . ~/.clasprc.json || echo "JSON validation failed"
          echo ""
          echo "Check token structure:"
          jq '.tokens.default.access_token' ~/.clasprc.json || echo "Cannot find access_token"
          echo ""
          echo "Clasp version:"
          clasp --version || echo "Clasp not found"
          echo ""
          echo "Find all clasp-related files:"
          find ~ -name "*clasp*" -type f 2>/dev/null || echo "No clasp files found"

      - name: Create clasp config
        run: |
          echo '{"scriptId":"${{ secrets.SIEVE_HOME_SCRIPT_ID }}","rootDir":"./dist"}' > .clasp.json

      - name: Test clasp authentication first
        run: |
          echo "=== TESTING CLASP AUTH BEFORE PUSH ==="
          echo "Clasp status:"
          clasp status || echo "STATUS FAILED"
          echo ""
          echo "Current directory contents:"
          ls -la
          echo ""
          echo ".clasp.json contents:"
          cat .clasp.json || echo "NO .clasp.json"
          echo ""
          
      - name: Push to Google Apps Script
        run: |
          echo "Pushing to Home Apps Script..."
          echo "=== FULL CLASP PUSH OUTPUT ==="
          clasp push --force 2>&1 || {
            echo "=== CLASP PUSH FAILED - DEBUGGING ==="
            echo "Exit code: $?"
            echo "Clasp version: $(clasp --version)"
            echo "Auth file exists: $(ls -la ~/.clasprc.json)"
            echo "Project file exists: $(ls -la .clasp.json)"
            echo "Clasp status: $(clasp status 2>&1)"
            exit 1
          }

      - name: Deploy new version
        run: |
          echo "Deploying new version..."
          clasp deploy --description "Deploy $(date '+%Y-%m-%d %H:%M:%S')"

      - name: Test deployment
        run: |
          echo "Testing deployment..."
          clasp run --function testDeployment
        continue-on-error: true

      - name: Notify success
        if: success()
        run: |
          echo "âœ… Home Sieve deployment successful!"
          echo "ðŸ“§ Account: scott.a.idler@gmail.com"
          echo "ðŸ†” Script ID: ${{ secrets.SIEVE_HOME_SCRIPT_ID }}"
